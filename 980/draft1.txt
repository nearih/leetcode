package main

import "fmt"

func main() {
	// count all zero
	grid := [][]int{[]int{1, 0, 0}, []int{0, 0, 2}}
	n := uniquePathsIII(grid)
	fmt.Println(n)
}

func uniquePathsIII(grid [][]int) int {
	zero := 0
	start := []int{}
	// get total number of zero
	for y, slice := range grid {
		for x, num := range slice {
			if num == 0 {
				zero++
			}
			if num == 1 {
				start = append(start, y)
				start = append(start, x)
			}
		}
	}
	fmt.Println("num empty", zero)
	fmt.Println("start point", start)
	//dep first search find path
	// for y := 0; y < len(grid); y++ {
	// 	for x := 0; x < len(grid[y]); x++ {
	// 		fmt.Println(x, y)
	// 	}
	// }
	n := recur(grid, start[0], start[1], start[0], start[1], 0, zero, 0)
	//track back

	return n
}

func recur(grid [][]int, y, x, oy, ox, c, zero, success int) int {
	fmt.Println(grid, y, x, oy, ox, c, zero, success)
	if y+1 < len(grid) {
		fmt.Println("y+1")
		fmt.Println(y, x)
		if grid[y+1][x] == 0 {
			grid[y+1][x] = 3
			c++
			return recur(grid, y+1, x, y+1, x, c, zero, success)
		}
		if grid[y+1][x] == 2 {
			if c == zero {
				success++
			}
			_ = backward(grid, y, x, y, x, c)
		}
	} else if y-1 < len(grid[0]) {
		fmt.Println("y-1	", y-1, " oy ", oy)
		fmt.Println("y-1")
		fmt.Println(y, x)
		if grid[y-1][x] == 0 {
			grid[y-1][x] = 3
			c++
			return recur(grid, y-1, x, y-1, x, c, zero, success)
		}
		if grid[y-1][x] == 2 {
			if c == zero {
				success++
			}
			_ = backward(grid, y, x, y, x, c)
		}
	} else if x+1 < len(grid[0]) {
		fmt.Println("x+1")
		fmt.Println(y, x)
		if grid[y][x+1] == 0 {
			grid[y][x+1] = 3
			c++
			return recur(grid, y, x+1, y, x+1, c, zero, success)
		}
		if grid[y][x+1] == 2 {
			if c == zero {
				success++
			}
			_ = backward(grid, y, x, y, x, c)
		}
	} else if x-1 < len(grid[0]) {
		fmt.Println("x-1")
		fmt.Println(y, x)
		if grid[y][x-1] == 0 {
			grid[y][x-1] = 3
			c++
			return recur(grid, y, x-1, y, x-1, c, zero, success)
		}
		if grid[y][x-1] == 2 {
			if c == zero {
				success++
			}
			_ = backward(grid, y, x, y, x, c)
		}
	}
	_ = backward(grid, y, x, y, x, c)
	if c == 2 {
		return c
	}
	fmt.Println("here")
	return success
}

func backward(grid [][]int, y, x, oy, ox, c int) int {
	if c == 0 {
		return c
	}
	if y-1 < len(grid) {
		fmt.Println(y, x)
		if grid[y-1][x] == 0 {
			grid[y-1][x] = 0
			c--
			return backward(grid, y-1, x, y-1, x, c)
		}
	} else if (y+1 < len(grid[0])) && (y+1 != oy) {
		fmt.Println(y, x)
		if grid[y+1][x] == 0 {
			grid[y+1][x] = 0
			c--
			return backward(grid, y+1, x, y+1, x, c)
		}
	} else if x-1 < len(grid[0]) {
		fmt.Println(y, x)
		if grid[y][x-1] == 0 {
			grid[y][x-1] = 3
			c--
			return backward(grid, y, x-1, y, x-1, c)
		}
	} else if (x+1 < len(grid[0])) && (x+1 != ox) {
		fmt.Println(y, x)
		if grid[y][x+1] == 0 {
			grid[y][x+1] = 3
			c--
			return backward(grid, y, x+1, y, x+1, c)
		}
	}
	return 0
}
